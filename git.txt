Изучение гит. 
----------------------------------------------------------------------------------------------------------------
1. Общие сведения.

----------------------------------------------------------------------------------------------------------------
2. Установка и настройка Гит
Скачиваем с офсайта git-scm.com (source code manager)
Для Linux необходима дополнительная доустановка скрипта для включения автозаполнения

Настройки бывают 3-х уровней:
 - System. Вцелом для всего компа (кто бы не использовал Гит). Лежат в /etc/gitconfig (Линукс) или /program files/git/etc/gitconfig (Винда)
	Комманда для быстрого редактирования: git config --system
 - User. Настройки для текущего пользователя системы. Лежат в ~/.gitconfig или $HOME/.gitconfig
	git config --global
 - Project. Особые настройки для конкретного пректа. Лежат в my_project/.git/config
	git config [ничего нету - значит для проекта]
	
Базовые настройки:
git config --global user.name "Alex" (Установить имя на уровне пользователя компьютера (уровень user))
git config --global user.email "rpk7@yandex.ru" (Установить мыло автора)
git config --global core.editor "notepad" (устанавливает редактор для тех случаев, когда открывается редактор)
git config --global color.ui true (установить окрашивание в цвета для вывода)
git config --list (отобразить установленные настройки)
git config user.name (выдаст значение этой записи)

----------------------------------------------------------------------------------------------------------------
3. Начинаем
Инициализация репозитория Гит
git init (Выполнить в каталоге, где нужно начать отслеживать; иными словами, эта папка будет репозиторием)
Тут же создалась папка .git, она всегда на самом верхнем уровне созданного репозитория. Ее лучше не трогать. И там лежит вся вся инфа по проекту.

git add file_name (Добавить файл для отслеживания)
git add . (Точка. Добавить все файлы для отслеживания)
git commit -m "Message" (Сделать коммит (слепок) и обозначить его сообщением Message)
git commit -am "Message" (Добавить все файлы в отслеживание и сделать коммит (слепок) и обозначить его сообщением Message)

git log (Список коммитов)
git log -n N (покажет только N записей)
git log --since=2015-05-26 (Показать все коммиты начиная с даты)
git log --until=2-15-05-26 (показать все коммиты кторые были до числа)
git log --author="name of author" (показывает все коммиты определенного автора)
git log --grep="reg_expr" (Ищет коммиты по регулярному выражению в описании)
git log ()
git log ()

----------------------------------------------------------------------------------------------------------------
4. Концепция и архетиктура Гит
Архитектура трех деревьев.
При выполнении комманды git add файлы попадают из рабочей дтиректории в буфер, а при выполнении git commit файлы попадают из буфера в репозиторий.
Таким образом достигается гибкость, что позволяет сохранять то что нужно, например, мы сделали много изменений, но для текущего коммита нам не нужны
все файлы. Так, имею промежуточное звено (буфер), мы можем добиваться необходимых результатов.

Структура:
Repository
  |
Staging index (Buffer)
  |
Working directory

В каждом коммите имеется свой хэш SHA-1 (40 символов) со всего слепка (не с файла). И каждый следующий ссылается на предыдущий. Так возможна 
целостность и гит может собирать корректные версии файлов на основании всех предыдущих изменений. Так, это делает невозможным поменять файлы из 
промежуточного коммита, так как это собьет хэши последующий коммитов. 

Существует указатель HEAD, который всегда указывает на верхушку текущего репозитория (последний коммит). Указывает на родителя следующего коммита.
мы можем перемещаться по дереву коммитов, меняя HEAD. 






